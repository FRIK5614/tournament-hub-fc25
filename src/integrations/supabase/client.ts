
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://izvfwjwobghxwjvmypyn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml6dmZ3andvYmdoeHdqdm15cHluIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMwNTM1NTIsImV4cCI6MjA1ODYyOTU1Mn0.kqAVfO1Ut0kng2aQzORqZ2GXnrgVDygmOiWcT_pCcc0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a singleton instance of the Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false, // Prevent automatic URL detection
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
      'Cache-Control': 'no-cache', // Prevent caching for all requests
    },
    // Enhanced fetch function that properly handles requests in all environments
    fetch: (url, options) => {
      try {
        // Create a clean URL without any timestamp parameters
        const urlObj = new URL(url.toString());
        
        // Remove any parameters that might cause issues with some CDNs or proxies
        const keysToRemove = ['_t', '_cache', 'timestamp'];
        keysToRemove.forEach(key => {
          if (urlObj.searchParams.has(key)) {
            urlObj.searchParams.delete(key);
          }
        });
        
        // Set a timeout for the request to prevent hanging
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
        
        return fetch(urlObj.toString(), {
          ...options,
          signal: controller.signal,
          cache: 'no-store', // Force network request every time
        }).finally(() => {
          clearTimeout(timeoutId);
        });
      } catch (error) {
        console.error("[SUPABASE] Error in fetch wrapper:", error);
        // Fall back to original URL if URL parsing fails
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000);
        
        return fetch(url.toString(), {
          ...options,
          signal: controller.signal,
          cache: 'no-store',
        }).finally(() => {
          clearTimeout(timeoutId);
        });
      }
    },
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Export a function to reset the client's internal state if needed
export const resetSupabaseConnection = () => {
  try {
    // Remove all channels
    const channels = supabase.getChannels();
    channels.forEach(channel => {
      try {
        supabase.removeChannel(channel);
      } catch (e) {
        console.error("[SUPABASE] Error removing channel:", e);
      }
    });
    
    // Log the reset
    console.log("[SUPABASE] Connection state reset successfully");
  } catch (error) {
    console.error("[SUPABASE] Error resetting connection state:", error);
  }
};
